-- журналирование временной метки последнего изменения строки в таблице customers/
-- добавим новую колонку, хранящую временную метку:
ALTER TABLE customers
ADD COLUMN last_updated timestamp;

-- создадим функцию (которую будет запускать триггер), присваивающую текущее время временной метке операции: 
CREATE OR REPLACE FUNCTION track_changes_on_customers() RETURNS trigger AS
$$
BEGIN
	NEW.last_updated = now();
	RETURN NEW;
END;
$$ LANGUAGE PLpgSQL;

-- создадим триггер, который будет срабатывать до операций вставки и обновления записи:
DROP TRIGGER IF EXISTS customers_timestamp ON customers;
CREATE TRIGGER customers_timestamp BEFORE INSERT OR UPDATE ON customers
	FOR EACH ROW EXECUTE PROCEDURE track_changes_on_customers();
	
SELECT * FROM customers;

-- обновим одну из имеющихся записей:
UPDATE customers
SET address = 'bla'
WHERE customer_id = 'AAAAA';

SELECT * FROM customers
WHERE customer_id = 'AAAAA';

-- вставим новую запись:
INSERT INTO customers
VALUES ('ABCDE', 'company', 'contact', 'title', 'address', 'city', null, 'code', 'country', '', '', null);

-- проверим обе записи:
SELECT * FROM customers
WHERE customer_id IN ('AAAAA', 'ABCDE');



-- журналирование пользователей, изменяющих данные сотрудников.
-- добавим новый столбец в таблице сотрудников:
ALTER TABLE employees
ADD COLUMN user_changed text;

-- создадим функцию, записывающую текущего пользователя, изменяющего данные:
CREATE OR REPLACE FUNCTION track_changes_on_employee() RETURNS trigger AS
$$
BEGIN
	NEW.user_changed = session_user; -- данная переменная содержит имя текущего пользователя
	RETURN NEW;
END;
$$ LANGUAGE PLpgSQL;

-- создадим триггер:
DROP TRIGGER IF EXISTS employees_user_change ON employees;
CREATE TRIGGER employees_user_change BEFORE INSERT OR UPDATE ON employees
	FOR EACH ROW EXECUTE PROCEDURE track_changes_on_employee();

SELECT * FROM employees;

UPDATE employees
SET salary = 88
WHERE employee_id = 9;

SELECT * FROM employees;

INSERT INTO employees
VALUES (10, '', '', '', '', null, null, '', '', '', '', '', '', '', null, '', null, '', 0, null);

SELECT * FROM employees;

